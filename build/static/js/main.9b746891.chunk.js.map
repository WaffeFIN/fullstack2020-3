{"version":3,"sources":["DataService.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","newFilter","handler","value","onChange","Addition","onSubmit","newName","newNumber","nameHandler","numberHandler","type","Numbers","persons","filter","person","name","toLowerCase","includes","map","key","number","Notification","message","className","App","useState","setPersons","errorMessage","setErrorMessage","useEffect","ds","catch","error","setTimeout","setNewName","setNewNumber","setNewFilter","event","target","preventDefault","length","filtered","entryObject","window","confirm","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b746891.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport ds from './DataService.js'\nimport './App.css'\n\nconst Filter = ({newFilter, handler}) => (\n    <div>\n      show: <input value={newFilter}\n                   onChange={handler} />\n    </div>\n)\n\nconst Addition = ({onSubmit, newName, newNumber, nameHandler, numberHandler}) => (\n  <form onSubmit={onSubmit}>\n    <div>\n      name: <input value={newName}\n                   onChange={nameHandler} />\n    </div>\n    <div>\n      number: <input value={newNumber}\n                   onChange={numberHandler} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Numbers = ({persons, newFilter}) => (\n  <div>\n    {persons.filter((person) => person.name.toLowerCase().includes(newFilter.toLowerCase())).map((person) => (\n      <p key={person.name}>{person.name}&nbsp;{person.number}</p>)\n    )}\n  </div>\n)\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst ALERT_TIMEOUT = 3000\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n      ds.getAll().then(setPersons).catch(error => {\n        setErrorMessage(\n          `Couldn't contact the database server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, ALERT_TIMEOUT)})\n    }, [])\n\n  const [ newName, setNewName ] = useState('')\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const [ newNumber, setNewNumber ] = useState('')\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const [ newFilter, setNewFilter ] = useState('')\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n\n  const addEntry = (event) => {\n    event.preventDefault()\n\n    if (newName.length === 0) {\n      setErrorMessage(\"Please add a name\")\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, ALERT_TIMEOUT)\n      return\n    }\n\n    const filtered = persons.filter((person) => person.name === newName)\n\n    const entryObject = filtered.length === 0 ? {\n      name: newName,\n      number: newNumber\n    } : { ...filtered[0], number: newNumber }\n\n    if (entryObject.id) {\n      if (!newNumber) {\n        if (window.confirm(\"Delete \" + entryObject.name + \"'s entry?\")) {\n          ds.remove(entryObject.id).catch(error => {\n            setErrorMessage(\n              `${entryObject.name}' was already removed from server`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, ALERT_TIMEOUT)})\n          setPersons(persons.filter(person => person.id !== entryObject.id))\n        } else return\n      } else if (window.confirm(\"Replace \" + entryObject.name + \"'s old number?\")) {\n        ds.update(entryObject.id, entryObject)\n        setPersons(persons.filter(person => person.id !== entryObject.id).concat(entryObject))\n      } else return\n    } else {\n      if (!newNumber) {\n        setErrorMessage(\"Couldn't find an entry for \" + newName + \" to delete\")\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, ALERT_TIMEOUT)\n      } else {\n        ds.create(entryObject)\n        setPersons(persons.concat(entryObject))\n      }\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n  \n  return (\n    <div>\n      <Notification message={errorMessage} />\n      <h2>Phonebook</h2>\n      <Filter newFilter={newFilter} handler={handleFilterChange} />\n      <h2>Add/Change a new entry</h2>\n      <p>Delete an entry by leaving the number field blank</p>\n      <Addition newName={newName} newNumber={newNumber}\n                nameHandler={handleNameChange}\n                numberHandler={handleNumberChange}\n                onSubmit={addEntry}\n      />\n      <h2>Numbers</h2>\n      <Numbers persons={persons} newFilter={newFilter}/>\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}